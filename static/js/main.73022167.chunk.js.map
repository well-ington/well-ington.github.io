{"version":3,"sources":["_components/_components/map/CosmoObject.tsx","_components/_components/map/Star.tsx","_components/_components/map/SolarSystem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Trace","styled","div","CosmoObject","distance","navigation","time","center","size","info","rot","React","useState","selected","selectPlanet","Math","floor","random","colorSeed","useEffect","clickHandler","event","target","className","window","addEventListener","removeEventListener","PeriodicVariation","type","cos","pow","sin","periodicY","periodicX","style","width","height","left","top","onClick","zIndex","cursor","backgroundImage","transform","border","borderRadius","position","backgroundColor","padding","justifyContent","textAlign","bottom","marginLeft","href","link","name","borderTop","borderLeft","borderRight","SunBody","Star","pos","perc","SolarSystem","scale","map","centralPoint","projects","plinks","description","i","length","push","massCenter","planetMap","massCenterCoordinates","rotateStyle","innerWidth","e","key","MainContainer","App","runtime","setRuntime","timing","setInterval","clearInterval","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.73022167.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ICosmoObject {\r\n    navigation: number[];\r\n    distance: number;\r\n    time: number;\r\n    center: number[];\r\n    type: string;\r\n    size: number;\r\n    info: any;\r\n    rot: number;\r\n}\r\nconst Trace = styled.div`\r\n    border: 2px dashed hsl(269, 73%, 73%);\r\n    border-radius: 50%;\r\n    position: absolute;\r\n`;\r\n\r\nconst CosmoObject: React.FC<ICosmoObject> = ({distance, navigation, time, center, size, info, rot}) => {\r\n    const [selected, selectPlanet] = React.useState(false);\r\n    const [colorSeed] = React.useState(Math.floor(Math.random() * 150) + (distance * 2));\r\n    React.useEffect(() => {\r\n        if (!!selected) {\r\n            const clickHandler = (event: any) => {\r\n                if(event.target.className !== 'referencer') selectPlanet(false);\r\n            }\r\n            window.addEventListener('click', clickHandler);\r\n            return () =>  window.removeEventListener('click', clickHandler);\r\n        }   \r\n    })\r\n\r\n    const PeriodicVariation = (type: string) => {\r\n        // return time%cicle > cicle/2 ? cicle - time%cicle : time%cicle;\r\n        return type === 'x' ? Math.cos((time)/Math.pow(distance/2, 2)) : Math.sin(time/Math.pow(distance/2, 2));\r\n    }\r\n\r\n    const periodicY = PeriodicVariation(`y`);\r\n    const periodicX = PeriodicVariation('x');\r\n    return <>\r\n     <Trace style={{width: `calc(${(distance*2) - 4}px)`, \r\n    height: `calc(${(distance*2) - 4}px)`, \r\n    left: `calc(${center[0]}vw - ${distance - 2}px)`, \r\n    top: `calc(${center[1]}vh - ${distance - 2}px)`}}/>\r\n    \r\n\r\n    <div onClick={() => selectPlanet(true)} style={{\r\n        width: `${selected ? size * 2 : size * 1.5}px`, height: `${selected ? size * 2 : size * 1.5}px`, \r\n        zIndex: selected ? 10 : 5, cursor: 'pointer',\r\n        // backgroundImage: `linear-gradient(\r\n        //     ${periodicX > 0 ? (1 + periodicY) * 90 : 360 - ((1 + periodicY) * 90) }deg, \r\n        //     hsl(200, 73%, 73%) 0%,\r\n        //     hsl(200, 73%, 63%) 15%, \r\n        //     hsl(200, 73%, 3%))`,\r\n        backgroundImage: `radial-gradient(circle at ${50 - (periodicX * 50)}% ${50 - (periodicY * 50)}%, \r\n        hsl(${colorSeed}, 73%, 73%) 0%,\r\n        hsl(${colorSeed}, 73%, 63%) 10%, \r\n        hsl(${colorSeed}, 73%, 3%))`,\r\n        transform: `rotateY(-${rot}deg)`,\r\n        border: `0px solid ${selected ? 'hsl(269, 73%, 93%)' : 'hsl(269, 73%, 53%)'}`, borderRadius: '50%',\r\n        position: 'absolute', \r\n        top: `calc(${50}vh - ${size * (selected ? 1 : 0.75)}px - ${navigation[1]/2}vh + ${periodicY * distance}px)`, \r\n        left: `calc(${50}vw - ${size * (selected ? 1 : 0.75)}px + ${navigation[0]/2}vw + ${periodicX * distance}px)`\r\n    }}>     \r\n     {selected ? <div className={'referencer'} style={{backgroundColor: '#eee', padding: '5px', \r\n        justifyContent: 'center', textAlign: 'center',\r\n        // marginTop: `calc(4px + ${size * 2}px)`,\r\n        position: 'absolute', top: periodicY > 0 ? '-160px' : '', bottom: periodicY < 0 ? '-160px' : '',\r\n        width: '150px', height: '140px',\r\n        marginLeft: '-60px'}}>\r\n            <div>\r\n            <a href={info.link}>{info.name}</a>\r\n            </div>\r\n            {/* <a href={info.link}>\r\n                    {info.description}\r\n                    </a> */}\r\n            <div>\r\n            </div>\r\n            <div style={{\r\n                borderTop: '25px solid #eee',\r\n                borderLeft: '25px solid transparent',\r\n                borderRight: '25px solid transparent',\r\n                position: 'absolute',\r\n                left: '55px',\r\n                bottom: '-25px'\r\n            }} />\r\n            </div> : ''}\r\n\r\n    </div>\r\n   \r\n    </>\r\n}\r\n\r\nexport default CosmoObject;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ISun {\r\n    pos: number[];\r\n    size: number;\r\n    rot: number;\r\n    time: number;\r\n}\r\n\r\nconst SunBody = styled.div`\t\r\n\tborder-radius: 50%;\r\n    position: absolute;\r\n`;\r\n\r\nconst Star: React.FC<ISun> = ({pos, size, time, rot}) => {\r\n    const loopSize = 7000;\r\n    const loopFactor = 50;\r\n    const perc = (time%loopSize)/loopSize;\r\n\r\n    const massFactor = 5;\r\n    return <SunBody style={{\r\n    left: `calc(${pos[0]}vw - ${size * massFactor/2}px)`, \r\n    backgroundImage: `radial-gradient(circle at 50%, hsl(52, 100%,${45 + ((perc > 0.5 ? (1 - perc) * loopFactor : perc * loopFactor )/1.5)}%), \r\n    hsl(52, 100%, ${50 + (perc > 0.5 ? (0.5 * loopFactor) - ((perc - 0.5) * loopFactor) : perc * loopFactor)}%), hsl(2, 100%, 66%) )`,\r\n    width: `${size * massFactor}px`, transform: `rotateY(-${rot}deg)`,\r\n    height: `${size * massFactor}px`,    \r\n    top: `calc(${pos[1]}vh - ${size * massFactor/2}px)`}}>\r\n        \r\n    </SunBody>;\r\n};\r\n\r\nexport default Star;\r\n","import React from 'react';\r\nimport CosmoObject from './CosmoObject';\r\nimport Star from './Star';\r\n\r\ninterface ISolarSystem {\r\n    navigation: number[];\r\n    time: number;\r\n    scale: number;\r\n}\r\n\r\nconst SolarSystem: React.FC<ISolarSystem> = ({navigation, time, scale}) => {\r\n    // const planetSize = 4;\r\n    const [planetMap, setPlanetMap] = React.useState(() => {\r\n        const map: any | object[] = [];\r\n        const centralPoint = [50, 50];\r\n        // const RandomFromArray = (array: any[]) => array[Math.floor(Math.random() * array.length)];\r\n        // const names = ['Mar', 'Ter', 'Merc', 'Jup', 'Plut', 'Ioc', 'Inav', 'V', 'Ac'];\r\n        // const subnames = ['ra', 'ete', 'ate', 'ão', 'inho', 'ika', 'impa', 'imceq', 'iter', 'iner', 'amer'];       \r\n        // const planetTypes = ['Rochoso', 'Gasoso'];  \r\n        const projects = ['Outrun CSS', 'Underwater CSS Marketplace', 'Explore Gallery', 'Food delivery template'];\r\n        const plinks = ['https://outrun-challenge.herokuapp.com/', \r\n        'https://marketplace-template.herokuapp.com/', \r\n        'https://sample-portfolio-brainclouder.herokuapp.com/explore', 'https://native-food-delivery.herokuapp.com/'];\r\n        const description = ['Outrun-style game', `A marketplace template I've made some time ago.`, \r\n        `Another template, this one I was messing with mouse position and parallax.`, \r\n        `This is a laboratory I've made to study React Native through React Native Web library. This project may\r\n        lack the proper optimization, but it gave me insights on how Redux affects performance,\r\n        `]\r\n        for (let i = 0; i < projects.length ; i++) {            \r\n            // const randomType = RandomFromArray(['Rochoso', 'Gasoso']);      \r\n            // const randomName = RandomFromArray(names) + RandomFromArray(subnames);\r\n            // const randomCoordinates = [ 40 - ((i + 1) * 10), 40];\r\n            // const randomMass = (Math.random() * 1) + 0.5\r\n            map.push({\r\n                name: projects[i],\r\n                massCenter: centralPoint,\r\n                // coordinates: randomCoordinates,\r\n                distance: ((i + 1) * 40),\r\n                description: description[i],\r\n                link: plinks[i]\r\n                \r\n            });\r\n        }\r\n        return map;\r\n    });\r\n    const massCenterCoordinates = [50 + (navigation[0]/2), 50 - (navigation[1]/2)];\r\n    const rotateStyle = 0;\r\n\r\n    return <div style={{transform: `scale(${(window.innerWidth < 835 ? window.innerWidth/835 : 1) + rotateStyle/180}) rotateX(${rotateStyle}deg)`}}>\r\n        <div>\r\n        {/* <CosmoObject coordinates={[60, 40]} navigation={navigation}/> */}\r\n        {\r\n            planetMap.map((e: any, i: number) => <CosmoObject rot={rotateStyle} type=\"planet\" key={e.name + i} \r\n            distance={e.distance + ((scale*10)/2)} size={scale} info={e}\r\n            navigation={navigation} center={massCenterCoordinates} time={time + 65000} /> )\r\n        }\r\n        <Star size={scale} time={time} rot={rotateStyle} pos={massCenterCoordinates}/>\r\n        {/* <div style={{\r\n            backgroundColor: 'yellow',\r\n            borderRadius: '50%',\r\n            width: '50px',\r\n            height: '50px',\r\n            position: 'absolute',\r\n            left: `calc(50vw - 25px + ${navigation[0]/2}vw)`,\r\n            top: `calc(50vh - 25px - ${navigation[1]/2}vh)`,\r\n        }}>\r\n\r\n        </div> */}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default SolarSystem;","import React from 'react';\nimport styled from 'styled-components';\nimport avatar from './img/PIXEL_AVATAR.png';\nimport SolarSystem from './_components/_components/map/SolarSystem';\n\n\nconst MainContainer = styled.div`\n  text-align: center;\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  background-color: hsl(245, 56%, 8%);\n`;\n\nconst WorkWrap = styled.div`\n  background-color: white;\n  box-shadow: 0 0 2px black;\n  padding: 1em 1.5em;\n  width: calc(33vw - 1px);\n`;\n\nconst ProjectStack = styled.div`\n    display: flex;\n    flex: flex-wrap;\n    flex-direction: row;\n    justify-content: center;\n`;\n\nconst App: React.FC = () => {\n  const [runtime, setRuntime] = React.useState(0);\n\n  React.useEffect(() =>  {\n    const timing = setInterval(() => {\n      setRuntime(runtime + 25);\n    }, 15);\n    return () => {\n      clearInterval(timing);\n    }\n  } , [runtime, setRuntime])\n\n\n\n  const teckStack = ['Git', 'Sass', 'ReactJS', 'Redux', 'Axios', 'Bootstrap', 'Node', 'Express'];\n\n  const works = [['Outrun Challenge', 'https://outrun-challenge.herokuapp.com/'], \n  ['Food Delivery template with React Native Web', 'https://native-food-delivery.herokuapp.com/'],\n  ['Underwater Marketplace Template', 'https://marketplace-template.herokuapp.com/'],\n  ['Explore Gallery', 'https://sample-portfolio-brainclouder.herokuapp.com/explore']];\n\n\n  return <MainContainer>\n    {/* <div>\n      <img src={avatar} width={100} height={100} style={{borderRadius: '50%'}} />\n    </div>\n    <p>Celso Wellington - Front-end React developer</p> */}\n\n    {/* {\n      works.map((e: string[]) => <WorkWrap>      \n        <a href={e[1]}>{e[0]}</a>        \n      </WorkWrap>)\n    } */}\n    <SolarSystem scale={20} navigation={[0,0]} time={runtime} />\n\n\n  </MainContainer>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}