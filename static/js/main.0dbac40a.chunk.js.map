{"version":3,"sources":["store/reducer/main.tsx","_components/_components/map/CosmoObject.tsx","_components/_components/map/Star.tsx","_components/_components/map/SolarSystem.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ACTIONS","initialState","selectedInfo","name","description","link","index","createStore","state","action","type","payload","BottomDashed","styled","div","TopDashed","SatObj","connect","dispatch","selectProject","e","clearProject","distance","navigation","time","center","size","info","rot","selected","React","useState","Math","floor","random","colorSeed","useEffect","clickHandler","event","target","className","window","addEventListener","removeEventListener","PeriodicBodyVariation","d","cos","pow","sin","periodicY","periodicX","style","width","height","left","top","opacity","borderBottom","onClick","zIndex","cursor","backgroundImage","transform","border","borderRadius","position","satellite","length","map","pY","pX","backgroundColor","justifyContent","marginLeft","borderTop","borderLeft","borderRight","bottom","SunBody","Star","pos","perc","SolarSystem","scale","centralPoint","projects","plinks","i","randomSatellite","satelliteArray","o","push","massCenter","planetMap","massCenterCoordinates","innerWidth","key","MainContainer","ProjectContainer","ProjectCard","project","runtime","setRuntime","timing","setInterval","clearInterval","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0dbac40a.chunk.js","sourcesContent":["import { createStore } from \"redux\";\r\n\r\nconst selectProject: string = 'SELECT-PROJECT';\r\nconst clearProject: string = 'CLEAR-PROJECT';\r\n\r\nexport const ACTIONS = {\r\n    selectProject, clearProject\r\n}\r\n\r\nexport type TinitialState = {\r\n    selectedInfo: {\r\n        name: string,\r\n        description: string,\r\n        link: string,\r\n        index: number,\r\n    }\r\n}\r\n\r\nconst initialState: TinitialState = {\r\n    selectedInfo: {\r\n        name: '',\r\n        description: '',\r\n        link: '',\r\n        index: -1,\r\n    },\r\n}\r\n\r\nconst main = (state: TinitialState = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case ACTIONS.selectProject:\r\n            return {\r\n                selectedInfo: action.payload,\r\n            }\r\n        case ACTIONS.clearProject:\r\n            return {\r\n                ...state,\r\n                ...initialState\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default createStore(main);","import React, { Dispatch } from 'react';\r\nimport styled from 'styled-components';\r\nimport { ACTIONS, TinitialState } from '../../../store/reducer/main';\r\nimport { connect } from 'react-redux';\r\n\r\ninterface ICosmoObject {\r\n    navigation: number[];\r\n    distance: number;\r\n    time: number;\r\n    center: number[];\r\n    selectedInfo: {index: number};\r\n    type: string;\r\n    size: number;\r\n    info: any;\r\n    rot: number;\r\n    selectProject: (e: {name: string, description: string, link: string, index: number}) => void;\r\n    clearProject: () => void;\r\n}\r\nconst BottomDashed = styled.div`\r\n    border-bottom: 4px solid  hsl(700, 99%, 45%);\r\n    border-radius: 50%;\r\n    position: absolute;\r\n    z-index: 7;\r\n`;\r\nconst TopDashed = styled.div`\r\n    border-radius: 50%;    \r\n    background-color: #ff000011;\r\n    position: absolute;\r\n    z-index: 3;\r\n`;\r\n\r\nconst SatObj = styled.div`\r\n    position: absolute;\r\n    width: 5px;\r\n    height: 5px;\r\n    border-radius: 50%;\r\n`;\r\n\r\nconst CosmoObject: React.FC<ICosmoObject> = ({distance, navigation, time, center, size, info, rot, selectProject, clearProject, selectedInfo}) => {\r\n    // const [selected, selectPlanet] = React.useState(false);\r\n    const selected = selectedInfo.index === info.index;\r\n    const [colorSeed] = React.useState(Math.floor(Math.random() * 150) + (distance * 2));\r\n    React.useEffect(() => {\r\n        if (!!selected) {\r\n            const clickHandler = (event: any) => {\r\n                if(event.target.className !== 'referencer') {\r\n                    clearProject();\r\n                };\r\n            }\r\n            window.addEventListener('click', clickHandler);\r\n            return () =>  window.removeEventListener('click', clickHandler);\r\n        }   \r\n    });\r\n    \r\n\r\n\r\n\r\n    const PeriodicBodyVariation = (type: string, d: number) => {\r\n        return type === 'x' ?  Math.cos((time)/Math.pow(d/2, 2)) : Math.sin(time/Math.pow(d/2, 2));\r\n    }\r\n\r\n\r\n    const periodicY = PeriodicBodyVariation(`y`, distance);\r\n    const periodicX = PeriodicBodyVariation('x', distance);\r\n    return <>\r\n     {info.index === 0 ? <BottomDashed style={{width: `calc(${(distance*2) - 4}px)`, \r\n    height: `calc(${(distance*2) - 4}px)`, \r\n    left: `calc(${center[0]}vw - ${distance}px)`, \r\n    top: `calc(${center[1]}vh - ${distance - 3}px)`}}/>  : ''}\r\n    <TopDashed style={{width: `calc(${(distance*2) - 4}px)`, \r\n    height: `calc(${(distance*2) - 4}px)`, \r\n    left: `calc(${center[0]}vw - ${distance}px)`, \r\n    top: `calc(${center[1]}vh - ${distance}px)`,\r\n    opacity: 0.6,\r\n    borderBottom: info.index !== 0 ? '4px solid  hsl(700, 99%, 45%)': ''}}/>\r\n    \r\n\r\n    <div onClick={() => {\r\n\r\n        selectProject({name: info.name, description: info.description, link: info.link, index: info.index});\r\n    }} style={{\r\n        width: `${selected ? size * 2 : size * 1}px`, height: `${selected ? size * 2 : size * 1}px`, \r\n        zIndex: selected ? 10 : periodicY < 0 ? 5 : 8, cursor: 'pointer',\r\n        backgroundImage: `radial-gradient(circle at ${50 - (periodicX * 50)}% ${50 - (periodicY * 50)}%, \r\n        hsl(${colorSeed}, 73%, 73%) 0%,\r\n        hsl(${colorSeed}, 73%, 63%) 10%, \r\n        hsl(${colorSeed}, 73%, 3%))`,\r\n        transform: `rotateY(-${rot}deg) scale(${1 + (periodicY/4)})`,\r\n        border: `0px solid ${selected ? 'hsl(269, 73%, 93%)' : 'hsl(269, 73%, 53%)'}`, borderRadius: '50%',\r\n        position: 'absolute', \r\n        top: `calc(${50}vh - ${size * (selected ? 1 : 0.5)}px - ${navigation[1]/2}vh + ${periodicY * distance}px)`, \r\n        left: `calc(${50}vw - ${size * (selected ? 1 : 0.5)}px + ${navigation[0]/2}vw + ${periodicX * distance}px)`\r\n    }}>          \r\n            {\r\n            info.satellite.length > 0 ? info.satellite.map((e: number[]) => {\r\n                const pY = PeriodicBodyVariation('y', e[0] * 1.5);\r\n                const pX = PeriodicBodyVariation('x', e[0] * 1.5);\r\n            return <SatObj style={{\r\n                top: `calc(50% - 2.5px + ${pY * e[0] * 2.5}%)`, left: `calc(50% - 2.5px + ${pX * e[0] * 2.5}%)`,\r\n                backgroundColor: 'hsl(269, 73%, 63%)'\r\n\r\n            }} />}) : ''\r\n            }\r\n\r\n{\r\n     selected ? \r\n     <div className={'referencer'} style={{\r\n        justifyContent: 'center', \r\n        position: 'absolute', \r\n        // top: periodicY > 0 ? '-160px' : '', bottom: periodicY < 0 ? '-160px' : '',\r\n        marginLeft: '-60px'}}>\r\n            {/* <div>\r\n            <a href={info.link}>{info.name}</a>\r\n            </div> */}\r\n            {/* <a href={info.link}>\r\n                    {info.description}\r\n                    </a> */}\r\n            <div>\r\n            </div>\r\n            <div style={{\r\n                borderTop: '25px solid #eee',\r\n                borderLeft: '25px solid transparent',\r\n                borderRight: '25px solid transparent',\r\n                position: 'absolute',\r\n                left: '55px',\r\n                bottom: periodicY < 0 ? '' : '-25px',\r\n                top: '-25px'\r\n            }} />\r\n            </div> : ''\r\n            }\r\n    </div>   \r\n    </>\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        selectProject: (e: {name: string, description: string, link: string, index: number}) => dispatch({type: ACTIONS.selectProject, payload: e}),\r\n        clearProject: () => dispatch({type: ACTIONS.clearProject})\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: TinitialState) => {\r\n    const t = state;\r\n    return {\r\n        selectedInfo: t.selectedInfo,\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CosmoObject);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\ninterface ISun {\r\n    pos: number[];\r\n    size: number;\r\n    rot: number;\r\n    time: number;\r\n}\r\n\r\nconst SunBody = styled.div`\t\r\n\tborder-radius: 50%;\r\n    position: absolute;\r\n`;\r\n\r\nconst Star: React.FC<ISun> = ({pos, size, time, rot}) => {\r\n    const loopSize = 7000;\r\n    const loopFactor = 50;\r\n    const perc = (time%loopSize)/loopSize;\r\n\r\n    const massFactor = 15;\r\n    return <SunBody style={{\r\n    left: `calc(${pos[0]}vw - ${size * massFactor/2}px)`, \r\n    backgroundImage: `radial-gradient(circle at 50%, hsl(52, 80%,${45 + ((perc > 0.5 ? (1 - perc) * loopFactor : perc * loopFactor )/1.5)}%), \r\n    hsl(52, 80%, ${50 + (perc > 0.5 ? (0.5 * loopFactor) - ((perc - 0.5) * loopFactor) : perc * loopFactor)}%), hsl(2, 100%, 66%) )`,\r\n    width: `${size * massFactor}px`, transform: `rotateY(-${rot}deg)`,\r\n    height: `${size * massFactor}px`,\r\n    zIndex: 6,\r\n    top: `calc(${pos[1]}vh - ${size * massFactor/2}px)`}}>\r\n        \r\n    </SunBody>;\r\n};\r\n\r\nexport default Star;\r\n","import React from 'react';\r\nimport CosmoObject from './CosmoObject';\r\nimport Star from './Star';\r\n\r\ninterface ISolarSystem {\r\n    navigation: number[];\r\n    time: number;\r\n    scale: number;\r\n}\r\n\r\nconst SolarSystem: React.FC<ISolarSystem> = ({navigation, time, scale}) => {\r\n    // const planetSize = 4;\r\n    const [planetMap, setPlanetMap] = React.useState(() => {\r\n        const map: any | object[] = [];\r\n        const centralPoint = [50, 50];\r\n        // const RandomFromArray = (array: any[]) => array[Math.floor(Math.random() * array.length)];\r\n        // const names = ['Mar', 'Ter', 'Merc', 'Jup', 'Plut', 'Ioc', 'Inav', 'V', 'Ac'];\r\n        // const subnames = ['ra', 'ete', 'ate', 'ão', 'inho', 'ika', 'impa', 'imceq', 'iter', 'iner', 'amer'];       \r\n        // const planetTypes = ['Rochoso', 'Gasoso'];  \r\n        const projects = ['Outrun CSS', 'Underwater CSS Marketplace', 'Explore Gallery', 'Food delivery template'];\r\n        const plinks = ['https://outrun-challenge.herokuapp.com/', \r\n        'https://marketplace-template.herokuapp.com/', \r\n        'https://sample-portfolio-brainclouder.herokuapp.com/explore', 'https://native-food-delivery.herokuapp.com/'];\r\n        const description = ['Outrun-style game', `A marketplace template I've made some time ago.`, \r\n        `Another template, this one I was messing with mouse position and parallax.`, \r\n        `This is a laboratory I've made to study React Native through React Native Web library. This project may\r\n        lack the proper optimization, but it gave me insights on how Redux affects performance,\r\n        `];\r\n\r\n        for (let i = 0; i < projects.length ; i++) {            \r\n            // const randomType = RandomFromArray(['Rochoso', 'Gasoso']);      \r\n            // const randomName = RandomFromArray(names) + RandomFromArray(subnames);\r\n            // const randomCoordinates = [ 40 - ((i + 1) * 10), 40];\r\n            // const randomMass = (Math.random() * 1) + 0.5\r\n            const randomSatellite = Math.floor(Math.random() * 3);\r\n            const satelliteArray = [];\r\n            for (let o = 0; o < randomSatellite; o++) {\r\n                satelliteArray.push([((o + 2) * 15) + Math.floor(Math.random() * 15), (Math.random() * 0.5) + 0.5])\r\n            }\r\n\r\n            map.push({\r\n                name: projects[i],\r\n                massCenter: centralPoint,\r\n                // coordinates: randomCoordinates,\r\n                distance: ((i) * 60),\r\n                description: description[i],\r\n                link: plinks[i],\r\n                satellite: satelliteArray,\r\n                index: i,\r\n                \r\n            });\r\n        }\r\n        return map;\r\n    });\r\n    const massCenterCoordinates = [50 + (navigation[0]/2), 50 - (navigation[1]/2)];\r\n    const timeRotateFactor = (time%4000)/4000;\r\n    const rotateStyle = 60;\r\n\r\n    return <div style={{transform: `scale(${(window.innerWidth < 835 ? window.innerWidth/835 : 1) + rotateStyle/180}) rotateX(${rotateStyle}deg) translateZ(-${rotateStyle}px)`}}>\r\n        <div>\r\n        {/* <CosmoObject coordinates={[60, 40]} navigation={navigation}/> */}\r\n        {\r\n            planetMap.map((e: any, i: number) => <CosmoObject rot={rotateStyle} type=\"planet\" key={e.name + i} \r\n            distance={e.distance + ((scale*10)/2)} size={scale} info={e}\r\n            navigation={navigation} center={massCenterCoordinates} time={time + 65000} /> )\r\n        }\r\n        <Star size={scale} time={time} rot={rotateStyle} pos={massCenterCoordinates}/>\r\n        {/* <div style={{\r\n            backgroundColor: 'yellow',\r\n            borderRadius: '50%',\r\n            width: '50px',\r\n            height: '50px',\r\n            position: 'absolute',\r\n            left: `calc(50vw - 25px + ${navigation[0]/2}vw)`,\r\n            top: `calc(50vh - 25px - ${navigation[1]/2}vh)`,\r\n        }}>\r\n\r\n        </div> */}\r\n        </div>\r\n    </div>\r\n}\r\n\r\nexport default SolarSystem;","import React from 'react';\nimport styled from 'styled-components';\nimport avatar from './img/PIXEL_AVATAR.png';\nimport SolarSystem from './_components/_components/map/SolarSystem';\nimport { connect } from 'react-redux';\nimport { TinitialState } from './store/reducer/main';\n\ninterface IApp {\n  project: {name: string, description: string, link: string, index: number};\n}\n\n\nconst MainContainer = styled.div`\n  text-align: center;\n  position: fixed;\n  width: 100vw;\n  height: 100vh;\n  background-color: hsl(245, 56%, 8%);\n`;\n\nconst WorkWrap = styled.div`\n  background-color: white;\n  box-shadow: 0 0 2px black;\n  padding: 1em 1.5em;\n  width: calc(33vw - 1px);\n`;\n\nconst ProjectStack = styled.div`\n    display: flex;\n    flex: flex-wrap;\n    flex-direction: row;\n    justify-content: center;\n`;\n\nconst ProjectContainer = styled.div`\n  width: 100vw;\n  bottom: 0;\n  position: fixed;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n`;\n\nconst ProjectCard = styled.div`\n  background-color: #eee;\n  padding: 1em 2em;\n  text-align: center;\n`;\n\nconst App: React.FC<IApp> = ({project}) => {\n  const [runtime, setRuntime] = React.useState(0);\n\n  React.useEffect(() =>  {\n    const timing = setInterval(() => {\n      setRuntime(runtime + 15);\n    }, 30);\n    return () => {\n      clearInterval(timing);\n    }\n  } , [runtime, setRuntime])\n  // const teckStack = ['Git', 'Sass', 'ReactJS', 'Redux', 'Axios', 'Bootstrap', 'Node', 'Express'];\n\n  // const works = [['Outrun Challenge', 'https://outrun-challenge.herokuapp.com/'], \n  // ['Food Delivery template with React Native Web', 'https://native-food-delivery.herokuapp.com/'],\n  // ['Underwater Marketplace Template', 'https://marketplace-template.herokuapp.com/'],\n  // ['Explore Gallery', 'https://sample-portfolio-brainclouder.herokuapp.com/explore']];\n\n\n  return <MainContainer>\n    <SolarSystem scale={20} navigation={[0, 0]} time={runtime} />\n\n    {\n      project.index !== -1 ? \n      <ProjectContainer>\n        <ProjectCard>\n        <p>{project.name}</p>\n        <p>{project.description}</p>\n        </ProjectCard>\n      </ProjectContainer>\n      : ''\n    }\n  </MainContainer>\n}\n\nconst mapStateToProps = (state: TinitialState) => {\n  const t = state;\n  return {\n    project: t.selectedInfo\n  }\n}\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store/reducer/main';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}